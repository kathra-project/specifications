swagger: "2.0"
info:
  x-groupId: org.kathra
  x-artifactName: appManager
  description: Kathra Applications Manager
  version: 1.1.0-SNAPSHOT
  title: Kathra Applications Manager
securityDefinitions:
  kathra_auth:
    type: oauth2
    authorizationUrl: https://keycloak.irtsysx.fr/auth/realms/kathra/protocol/openid-connect/auth
    tokenUrl: https://keycloak.irtsysx.fr/auth/realms/kathra/protocol/openid-connect/token
    flow: accessCode
    scopes:
      read: read everything
      write: create everything
tags:
- name: groups
  description: Groups
- name: components
  description: Components
- name: apiVersions
  description: Api versions
- name: implementations
  description: Implementations
- name: repositories
  description: Repositories
- name: pipelines
  description: Pipelines
paths:
  /groups:
    get:
      operationId: getGroups
      summary: Get the groups list
      tags:
      - groups
      responses:
        "200":
          description: The Groups list
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /components:
    post:
      operationId: createComponent
      summary: Create a new Component
      tags:
      - components
      parameters:
      - in: body
        name: component
        description: 'The parameters for the component to create. Required: name and
          metadata.groupPath'
        schema:
          $ref: '#/definitions/Component'
      responses:
        "200":
          description: The Component that have just been created
          schema:
            $ref: '#/definitions/Component'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
    get:
      operationId: getComponents
      summary: Get the components list
      tags:
      - components
      responses:
        "200":
          description: The Components list
          schema:
            type: array
            items:
              $ref: '#/definitions/Component'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /components/{componentId}:
    get:
      operationId: getComponentById
      summary: Get the component having the given id
      tags:
      - components
      parameters:
      - in: path
        name: componentId
        required: true
        description: The ID of the Component to get
        type: string
      responses:
        "200":
          description: The Component having the given id
          schema:
            $ref: '#/definitions/Component'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
    delete:
      operationId: deleteComponentById
      summary: Delete the component having the given id
      tags:
      - components
      parameters:
      - in: path
        name: componentId
        required: true
        description: The ID of the Component to delete
        type: string
      responses:
        "200":
          description: The Component having the given id
          schema:
            $ref: '#/definitions/Component'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
  /components/{componentId}/implementations:
    get:
      operationId: getComponentImplementations
      summary: Get the component having the given id
      tags:
      - implementations
      parameters:
      - in: path
        name: componentId
        required: true
        description: The ID of the Component to get the implementations from
        type: string
      responses:
        "200":
          description: The array of Implementations of the given Component
          schema:
            type: array
            items:
              $ref: '#/definitions/Implementation'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /components/{componentId}/apiVersions:
    post:
      operationId: createApiVersion
      summary: Create a new ApiVersion via an OpenAPI file
      tags:
      - apiVersions
      consumes:
      - multipart/form-data
      parameters:
      - in: formData
        name: openApiFile
        description: The OpenAPI file representing the APIVersion to create
        type: file
      - in: path
        name: componentId
        required: true
        description: The ID of the Component the APIVersion will be created for
        type: string
      responses:
        "200":
          description: The ApiVersion that have just been created
          schema:
            $ref: '#/definitions/ApiVersion'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
  /apiVersions/{apiVersionId}:
    put:
      operationId: updateApiVersion
      summary: Update ApiVersion via an OpenAPI file
      tags:
      - apiVersions
      consumes:
      - multipart/form-data
      parameters:
      - in: formData
        name: openApiFile
        description: The OpenAPI file representing the APIVersion to create
        type: file
      - in: path
        name: apiVersionId
        required: true
        description: The ID of the Component the APIVersion will be created for
        type: string
      responses:
        "200":
          description: The ApiVersion that have just been created
          schema:
            $ref: '#/definitions/ApiVersion'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
    delete:
      operationId: deleteApiVersion
      summary: Delete ApiVersion via an OpenAPI file
      tags:
      - apiVersions
      consumes:
      - multipart/form-data
      parameters:
      - in: path
        name: apiVersionId
        required: true
        description: The ID of the Component the APIVersion will be deleted for
        type: string
      responses:
        "200":
          description: The ApiVersion that have just been deleted
          schema:
            $ref: '#/definitions/ApiVersion'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
    get:
      operationId: getApiVersionById
      summary: Get the Api Version having the given id
      tags:
      - apiVersions
      parameters:
      - in: path
        name: apiVersionId
        required: true
        description: The ID of the Api Version to get
        type: string
      responses:
        "200":
          description: The Api Version having the given id
          schema:
            $ref: '#/definitions/ApiVersion'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /apiVersions/{apiVersionId}/apiFile:
    get:
      operationId: getApiFile
      summary: Get the API File from the specified source repository
      tags:
      - apiVersions
      consumes:
      - multipart/form-data
      parameters:
      - in: path
        name: apiVersionId
        required: true
        description: The ID of the requested APIVersion file
        type: string
      responses:
        "200":
          description: The OpenAPI file describing the API
          schema:
            type: file
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /implementations:
    post:
      operationId: createImplementation
      summary: Create a new Implementation for the given ApiVersion
      tags:
      - implementations
      parameters:
      - in: body
        name: implementationParameters
        description: The parameters for the implementation to create
        schema:
          type: object
          required:
          - name
          - apiVersion
          - language
          properties:
            name:
              type: string
              description: Implementation's name
            apiVersion:
              $ref: '#/definitions/ApiVersion'
            language:
              type: string
              description: The language to use for source code generation
            desc:
              type: string
              description: Implementation's description
      responses:
        "200":
          description: The Implementation that have just been created
          schema:
            $ref: '#/definitions/Implementation'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
    get:
      operationId: getImplementations
      summary: Get the Implementations list
      tags:
      - implementations
      responses:
        "200":
          description: The Implementations list
          schema:
            type: array
            items:
              $ref: '#/definitions/Implementation'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /implementations/{implementationId}:
    get:
      operationId: getImplementationById
      summary: Get the Implementation having the given id
      tags:
      - implementations
      parameters:
      - in: path
        name: implementationId
        required: true
        description: The ID of the Implementation to get
        type: string
      responses:
        "200":
          description: The Implementation having the given id
          schema:
            $ref: '#/definitions/Implementation'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
    delete:
      operationId: deleteImplementationById
      summary: Delete the Implementation having the given id
      tags:
      - implementations
      parameters:
      - in: path
        name: implementationId
        required: true
        description: The ID of the Implementation to delete
        type: string
      responses:
        "200":
          description: The Implementation having the given id
          schema:
            $ref: '#/definitions/Implementation'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
  /sourceRepositories/branches/{sourceRepositoryId}:
    get:
      operationId: getRepositoryBranches
      summary: Get the branches for the given SourceRepository
      tags:
      - repositories
      parameters:
      - in: path
        name: sourceRepositoryId
        required: true
        description: The ID of the SourceRepository to get
        type: string
      responses:
        "200":
          description: The Branch list of the given SourceRepository
          schema:
            type: array
            items:
              type: string
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /commits/{sourceRepositoryId}:
    get:
      operationId: getRepositoryCommitsForBranch
      summary: Get the commits for the given SourceRepository for a given branch
      tags:
      - repositories
      parameters:
      - in: path
        name: sourceRepositoryId
        required: true
        description: The ID of the SourceRepository to get the commits from
        type: string
      - in: query
        name: branch
        required: true
        description: The name of the branch to get the commits from
        type: string
      responses:
        "200":
          description: The Commits list of the given SourceRepository for the given
            branch
          schema:
            type: array
            items:
              $ref: '#/definitions/Commit'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /apiFileValidation:
    post:
      summary: Check the integrity of an API file
      operationId: getApiFileValidation
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: apiFile
        in: formData
        description: API specification of the component's API
        required: true
        type: file
      responses:
        "200":
          description: apiFileValidation Response
          schema:
            $ref: '#/definitions/ApiFileValidationResponse'
  /pipelines/{pipelineId}/builds:
    get:
      operationId: getPipelineBuildsForBranch
      summary: Get the builds for the given pipeline for a given branch
      tags:
      - pipelines
      parameters:
      - in: path
        name: pipelineId
        required: true
        description: The ID of the Pipeline to get the builds of
        type: string
      - in: query
        name: branch
        required: true
        description: The name of the branch to get the builds of
        type: string
      responses:
        "200":
          description: The Build list of the given Pipeline for the given branch
          schema:
            type: array
            items:
              $ref: '#/definitions/Build'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
    post:
      operationId: executePipeline
      summary: Execute pipeline
      tags:
      - pipelines
      parameters:
      - in: path
        name: pipelineId
        required: true
        description: The ID of the Pipeline to get the builds of
        type: string
      - in: query
        name: branch
        required: true
        description: The name of the branch to get the builds of
        type: string
      responses:
        "200":
          description: The Implementation having the given id
          schema:
            $ref: '#/definitions/Build'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /catalog-entries-packages/{providerId}/versions/{version}:
    get:
      operationId: getCatalogEntryPackageFromProviderIdAndVersion
      summary: Get the CatalogEntryPackage having the given ProviderID and version
      tags:
      - catalog-entries
      parameters:
      - in: path
        name: providerId
        required: true
        description: The ProviderId of the CatalogEntryPackage to get
        type: string
      - in: path
        name: version
        required: true
        description: The Version of the CatalogEntryPackage to get
        type: string
      responses:
        "200":
          description: The CatalogEntryPackage having the given id and version
          schema:
            $ref: '#/definitions/CatalogEntryPackage'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /catalog-entries-packages/{providerId}:
    get:
      operationId: getCatalogEntryPackageFromProviderId
      summary: Get the CatalogEntryPackage having the given ProviderID [latest version]
      tags:
      - catalog-entries
      parameters:
      - in: path
        name: providerId
        required: true
        description: The ProviderId of the CatalogEntryPackage to get
        type: string
      responses:
        "200":
          description: The CatalogEntryPackage having the given id
          schema:
            $ref: '#/definitions/CatalogEntryPackage'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /catalog-entries-packages/:
    get:
      operationId: getCatalogEntryPackages
      summary: Get all CatalogEntryPackage with ProviderID
      tags:
      - catalog-entries
      responses:
        "200":
          description: The CatalogEntryPackage list with ProviderID
          schema:
            type: array
            items:
              $ref: '#/definitions/CatalogEntryPackage'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /catalog-entries/{catalogEntryId}:
    get:
      operationId: getCatalogEntry
      summary: Get the CatalogEntry having the given id
      tags:
      - catalog-entries
      parameters:
      - in: path
        name: catalogEntryId
        required: true
        description: The ID of the CatalogEntryId to get
        type: string
      responses:
        "200":
          description: The CatalogEntryId having the given id
          schema:
            $ref: '#/definitions/CatalogEntry'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
    delete:
      operationId: deleteCatalogEntryById
      summary: Delete the CatalogEntry having the given id
      tags:
      - catalog-entries
      parameters:
      - in: path
        name: catalogEntryId
        required: true
        description: The ID of the CatalogEntry to delete
        type: string
      responses:
        "200":
          description: The CatalogEntry having the given id
          schema:
            $ref: '#/definitions/CatalogEntry'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
  /catalog-entries-templates:
    get:
      operationId: getCatalogEntryTemplates
      summary: Get codegen templates
      tags:
      - catalog-entries
      responses:
        "200":
          description: The templates list
          schema:
            type: array
            items:
              $ref: '#/definitions/CatalogEntryTemplate'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
  /catalog-entries:
    get:
      operationId: getCatalogEntries
      summary: Get the catalog entries list
      tags:
      - catalog-entries
      responses:
        "200":
          description: The catalog entries list
          schema:
            type: array
            items:
              $ref: '#/definitions/CatalogEntry'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - read
    post:
      operationId: addEntryToCatalogFromTemplate
      summary: Add a new entry to catalog from template
      tags:
      - catalog-entries
      parameters:
      - in: body
        name: catalogEntry
        description: The catalog entry to create from template
        schema:
          $ref: '#/definitions/CatalogEntryTemplate'
      responses:
        "200":
          description: The CatalogEntry that have just been created
          schema:
            $ref: '#/definitions/CatalogEntry'
        "401":
          description: Unauthorized
      security:
      - kathra_auth:
        - write
definitions:
  RESOURCE_STATUS:
    type: string
    enum: &RESOURCE_STATUS
    - PENDING
    - READY
    - UPDATING
    - UNSTABLE
    - ERROR
    - DELETED
  PROGRAMMING_LANGUAGE:
    type: string
    enum: &PROGRAMMING_LANGUAGE
    - JAVA
    - PYTHON
  BINARY_REPOSITORY_TYPE:
    type: string
    enum: &BINARY_REPOSITORY_TYPE
    - JAVA
    - PYTHON
    - DOCKER_IMAGE
    - HELM
  LIBRARY_TYPE:
    type: string
    enum: &LIBRARY_TYPE
    - MODEL
    - INTERFACE
    - CLIENT
  PIPELINE_TEMPLATE:
    type: string
    enum: &PIPELINE_TEMPLATE
    - JAVA_LIBRARY
    - PYTHON_LIBRARY
    - JAVA_SERVICE
    - PYTHON_SERVICE
    - HELM_PACKAGE
    - DOCKER_SERVICE
  PACKAGE_TYPE:
    type: string
    enum: &PACKAGE_TYPE
    - HELM
  PACKAGE_TEMPLATE_TYPE:
    type: string
    enum: &PACKAGE_TEMPLATE_TYPE
    - REST_SERVICE
  Resource:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      status:
        enum: *RESOURCE_STATUS
      createdBy:
        type: string
      updatedBy:
        type: string
      createdAt:
        type: integer
      updatedAt:
        type: integer
      metadata:
        type: object
        additionalProperties:
          type: object
  Component:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        description:
          type: string
        title:
          type: string
        versions:
          type: array
          items:
            $ref: '#/definitions/ApiVersion'
        libraries:
          type: array
          items:
            $ref: '#/definitions/Library'
        implementations:
          type: array
          items:
            $ref: '#/definitions/Implementation'
        apiRepository:
          $ref: '#/definitions/SourceRepository'
  Asset:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        binaryRepository:
          $ref: '#/definitions/BinaryRepository'
        sourceRepository:
          $ref: '#/definitions/SourceRepository'
        pipeline:
          $ref: '#/definitions/Pipeline'
        catalogEntries:
          type: "array"
          items:
            $ref: "#/definitions/CatalogEntry"
  BinaryRepository:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        group:
          $ref: '#/definitions/Group'
        type:
          enum: *BINARY_REPOSITORY_TYPE
        provider:
          type: string
        providerId:
          type: string
        url:
          type: string
        snapshot:
          type: boolean
  Library:
    allOf:
    - $ref: '#/definitions/Asset'
    - type: object
      properties:
        component:
          $ref: '#/definitions/Component'
        type:
          enum: *LIBRARY_TYPE
        language:
          enum: *PROGRAMMING_LANGUAGE
        versions:
          type: array
          items:
            $ref: '#/definitions/LibraryApiVersion'
  Implementation:
    allOf:
    - $ref: '#/definitions/Asset'
    - type: object
      properties:
        component:
          $ref: '#/definitions/Component'
        description:
          type: string
        language:
          enum: *PROGRAMMING_LANGUAGE
        title:
          type: string
        versions:
          type: array
          items:
            $ref: '#/definitions/ImplementationVersion'
  ImplementationVersion:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        sourceRepo:
          $ref: '#/definitions/SourceRepository'
        version:
          type: string
        implementation:
          $ref: '#/definitions/Implementation'
        apiVersion:
          $ref: '#/definitions/ApiVersion'
  ApiVersion:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        component:
          $ref: '#/definitions/Component'
        released:
          type: boolean
        version:
          type: string
        apiRepositoryStatus:
          enum: *RESOURCE_STATUS
        librariesApiVersions:
          type: array
          items:
            $ref: '#/definitions/LibraryApiVersion'
        implementationsVersions:
          type: array
          items:
            $ref: '#/definitions/ImplementationVersion'
  LibraryApiVersion:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        library:
          $ref: '#/definitions/Library'
        apiVersion:
          $ref: '#/definitions/ApiVersion'
        apiRepositoryStatus:
          enum: *RESOURCE_STATUS
        pipelineStatus:
          enum: *RESOURCE_STATUS
  SourceRepository:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        provider:
          type: string
        providerId:
          type: string
        path:
          type: string
        sshUrl:
          type: string
        httpUrl:
          type: string
        webUrl:
          type: string
        branchs:
          type: array
          items:
            type: string
  Pipeline:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        provider:
          type: string
        providerId:
          type: string
        credentialId:
          type: string
        path:
          type: string
        sourceRepository:
          $ref: '#/definitions/SourceRepository'
        template:
          enum: *PIPELINE_TEMPLATE
  Build:
    type: "object"
    properties:
      buildNumber:
        description: Build identifier
        type: string
      path:
        description: Pipeline path
        type: string
      commitLabel:
        description: Branch or Tag
        type: string
      commitId:
        description: Commit id
        type: string
      creationDate:
        description: Build date (UTC timestamp)
        type: integer
        format : int64
      duration:
        description: Duration in seconds
        type: integer
        format : int32
      status:
        description: Build status
        type: string
        enum: [scheduled, processing, success, failed]
      buildArguments:
        description: Additional Build arguments
        type: array
        items:
          $ref: '#/definitions/BuildArgument'
      logs:
        description: Build logs
        type: string
  BuildArgument:
    type: "object"
    properties:
      key:
        description: Build argument key
        type: string
      value:
        description: Build argument value
        type: string
  Group:
    allOf:
    - $ref: '#/definitions/Resource'
    - type: object
      properties:
        path:
          type: string
          description: Group's path in case of subgroup
        technicalUser:
          $ref: '#/definitions/User'
        binaryRepositories:
          type: "array"
          items:
            $ref: "#/definitions/BinaryRepository"
        members:
          type: "array"
          items:
            $ref: "#/definitions/Assignation"
        parent:
          $ref: '#/definitions/Group'
        sourceRepositoryStatus:
          enum: *RESOURCE_STATUS
        sourceMembershipStatus:
          enum: *RESOURCE_STATUS
        pipelineFolderStatus:
          enum: *RESOURCE_STATUS
        binaryRepositoryStatus:
          enum: *RESOURCE_STATUS
  KeyPair:
    allOf:
    - $ref: "#/definitions/Resource"
    - type: "object"
      properties:
        privateKey:
          type: string
        publicKey:
          type: string
        group:
          $ref: '#/definitions/Group'
  User:
    allOf:
    - $ref: "#/definitions/Resource"
    - type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
        groups:
          type: "array"
          items:
            $ref: "#/definitions/Assignation"
  Assignation:
    allOf:
    - $ref: "#/definitions/Resource"
    - type: "object"
      properties:
        role:
          type: "string"
        fte:
          type: "string"
  SourceRepositoryCommit:
    type: object
    properties:
      id:
        type: string
      shortId:
        type: string
      title:
        type: string
      authorName:
        type: string
      authorEmail:
        type: string
      createdAt:
        type: string
      committerName:
        type: string
      committerEmail:
        type: string
      message:
        type: string
  Membership:
    type: object
    properties:
      path:
        type: "string"
      memberType:
        type: "string"
        enum: ["user", "group"]
      memberName:
        type: "string"
      role:
        type: "string"
        enum: ["guest", "contributor", "manager"]

  PackageTemplate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name"
      arguments:
        type: "array"
        description: "Catalog entry arguments"
        items:
          $ref: "#/definitions/PackageTemplateArgument"
    example:
      - name: RestApiService
        arguments:
          - key: CHART_NAME
            contrainst: "[A-Za-z0-9]"
          - key: CHART_VERSION
            contrainst: "[0-9]+\\.[0-9]+\\.[0-9]+"
          - key: CHART_DESCRIPTION
            contrainst: "[A-Za-z0-9]"
          - key: APP_VERSION
            contrainst: "[0-9]+\\.[0-9]+\\.[0-9]+"
          - key: IMAGE_NAME
            value: ".+"
          - key: IMAGE_TAG
            value: ".+"
          - key: REGISTRY_HOST
            value: ".+"
  PackageTemplateArgument:
    type: "object"
    properties:
      key:
        type: "string"
        description: "Argument key to generate catalog entry"
      value:
        type: "string"
        description: "Argument value to generate catalog entry"
      contrainst:
        type: "string"
        description: "Argument constraint"
    example:
      contrainst: "[A-Za-z0-9]"
      value: "MyFirstChart"
      key: "CHART_NAME"

  CatalogEntry:
    allOf:
    - $ref: "#/definitions/Resource"
    - type: "object"
      properties:
        description:
          type: "string"
          description: "Description"
        icon:
          type: "string"
          description: "Icon's URL"
        packageTemplate:
          enum: *PACKAGE_TEMPLATE_TYPE
        packages:
          type: "array"
          items:
            $ref: "#/definitions/CatalogEntryPackage"
    example:
      name: "postgresql"
      description: "Chart for PostgreSQL, an object-relational database manag..."
     
  CatalogEntryPackage:
    allOf:
    - $ref: "#/definitions/Asset"
    - type: "object"
      properties:
        catalogEntry:
          $ref: '#/definitions/CatalogEntry'
        packageType:
          enum: *PACKAGE_TYPE
        provider:
          type: "string"
          description: "Provider"
        providerId:
          type: "string"
          description: "ProviderId"
        url:
          type: "string"
          description: "String"
        versions:
          type: "array"
          items:
            $ref: "#/definitions/CatalogEntryPackageVersion"
    example:
      providerId: "stable/postgresql"
      repository: "http://harbor.kathra.org/chartrepo"
      provider: "helm"
      name: "postgresql"
      
        
  CatalogEntryPackageVersion:
    type: "object"
    properties:
      catalogEntryPackage:
        $ref: '#/definitions/CatalogEntryPackage'
      version:
        type: "string"
        description: "Version"
      documentation:
          type: "string"
          description: "Documentation of catalog entry (Markdown)"
      arguments:
        type: "array"
        description: "Catalog entry arguments"
        items:
          $ref: "#/definitions/CatalogEntryArgument"
    example:
      version: "6.5.4"
      documentation: "# PostgreSQL
[PostgreSQL](https://www.postgresql.org/) is an object-relational database management system (ORDBMS) with an emphasis on extensibility and on standards-compliance.
## TL;DR;
```console
$ helm install stable/postgresql
```
## Introduction
This chart bootstraps a [PostgreSQL](https://github.com/bitnami/bitnami-docker-postgresql) deployment on a [Kubernetes](http://kubernetes.io) cluster using the [Helm](https://helm.sh) package manager.
Bitnami charts can be used with [Kubeapps](https://kubeapps.com/) for deployment and management of Helm Charts in clusters. This chart has been tested to work with NGINX Ingress, cert-manager, fluentd and Prometheus on top of the [BKPR](https://kubeprod.io/).
.. .. .
"
      arguments:
      - label: "global.postgresql.postgresqlDatabase"
        description: "PostgreSQL database (overrides postgresqlDatabase)"
        contrainst: ".*"
        value: "nil"
        key: "global.postgresql.postgresqlDatabase"
      - label: "global.postgresql.postgresqlUsername"
        description: "PostgreSQL usernmae (overrides postgresqlUsername)"
        contrainst: ".*"
        value: "nil"
        key: "global.postgresql.postgresqlUsername"
  CatalogEntryArgument:
    type: "object"
    properties:
      label:
        type: "string"
        description: "Readable argument for catalog entry"
      description:
        type: "string"
        description: "Description argument for catalog entry"
      key:
        type: "string"
        description: "Argument key for catalog entry"
      value:
        type: "string"
        description: "Argument value for catalog entry"
      contrainst:
        type: "string"
        description: "Argument constraint for catalog entry"
    example:
      label: "global.postgresql.postgresqlUsername"
      description: "PostgreSQL database (overrides postgresqlDatabase)"
      contrainst: ".*"
      value: ""
      key: "global.postgresql.postgresqlDatabase"
  Commit:
    type: object
    properties:
      id:
        type: string
      author:
        type: string
      message:
        type: string
      hash:
        type: string
      date:
        type: string
  ApiFileValidationResponse:
    type: object
    properties:
      format:
        type: string
        enum:
        - json
        - yaml
        - invalid
      name:
        type: string
        description: Service's name
      groupId:
        type: string
        description: Service's groupId
      version:
        type: string
        description: Service's version
      operations:
        type: boolean
        description: Contains operations
      model:
        type: boolean
        description: Contains model

  CatalogEntryTemplate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Template Name"
      label:
        type: "string"
        description: "Template Label"
      arguments:
        type: "array"
        description: "CodeGen Argument"
        items:
          $ref: "#/definitions/CatalogEntryTemplateArgument"
    example:
      - name: RestApiFromImplementation
        label: "Rest Api from Implementation"
        arguments:
          - key: NAME
            contrainst: "[A-Za-z0-9]+"
          - key: DESCRIPTION
            contrainst: ".*"
          - key: IMPLEMENTATION_ID
            contrainst: "[A-Za-z0-9]+"
      - name: RestApiFromDocker
        label: "Rest Api from Docker Image"
        arguments:
          - key: NAME
            contrainst: "[A-Za-z0-9]+"
          - key: DESCRIPTION
            contrainst: ".*"
          - key: IMAGE_NAME
            value: ".+"
          - key: IMAGE_TAG
            value: ".+"
          - key: IMAGE_REGISTRY
            value: ".+"
  CatalogEntryTemplateArgument:
    type: "object"
    properties:
      key:
        type: "string"
        description: "Argument key to generate codegen"
      label:
        type: "string"
        description: "Argument label"
      value:
        type: "string"
        description: "Argument value to generate codegen"
      contrainst:
        type: "string"
        description: "Argument constraint"
    example:
      contrainst: "[A-Za-z0-9]"
      value: "MyFirstChart"
      key: "CHART_NAME"
x-dependencies:
- artifactId: kathra-core-model
  groupId: org.kathra
  artifactVersion: 1.1.0-SNAPSHOT
  modelPackage: core.model
- artifactId: kathra-codegen-model
  groupId: org.kathra
  artifactVersion: 1.1.0-SNAPSHOT
  modelPackage: core.model
